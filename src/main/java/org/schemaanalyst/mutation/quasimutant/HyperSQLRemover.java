/*
 */
package org.schemaanalyst.mutation.quasimutant;

import org.schemaanalyst.sqlrepresentation.datatype.*;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import org.schemaanalyst.mutation.Mutant;
import org.schemaanalyst.sqlrepresentation.Schema;

/**
 * Removes those mutant schemas that will be rejected by the HyperSQL DBMS, but 
 * may be accepted by other DBMSs.
 * 
 * @author Chris J. Wright
 */
public class HyperSQLRemover extends StaticDBMSRemover {

    @Override
    public List<Mutant<Schema>> removeMutants(List<Mutant<Schema>> mutants) {
        mutants = super.removeMutants(mutants);
        mutants = new PrimaryKeyUniqueOverlapMutantRemover().removeMutants(mutants);
        return mutants;
    }
    
    /*
      Automatically generated by class org.schemaanalyst.util.dbms.DBMSCompatibleDataTypeResolver
     for HyperSQLDBMS on Jul 22,2015 10:03

      Map<Class<?>, Set<Class<?>>> compatibleTypes;
    */
    protected void initializeCompatibleTypes() {
        compatibleTypes = new HashMap<>();
        compatibleTypes.put(BigIntDataType.class, new HashSet<Class<?>>());
        compatibleTypes.get(BigIntDataType.class).add(BigIntDataType.class);
        compatibleTypes.get(BigIntDataType.class).add(DecimalDataType.class);
        compatibleTypes.get(BigIntDataType.class).add(DoubleDataType.class);
        compatibleTypes.get(BigIntDataType.class).add(FloatDataType.class);
        compatibleTypes.get(BigIntDataType.class).add(IntDataType.class);
        compatibleTypes.get(BigIntDataType.class).add(MediumIntDataType.class);
        compatibleTypes.get(BigIntDataType.class).add(NumericDataType.class);
        compatibleTypes.get(BigIntDataType.class).add(RealDataType.class);
        compatibleTypes.get(BigIntDataType.class).add(SmallIntDataType.class);
        compatibleTypes.get(BigIntDataType.class).add(TinyIntDataType.class);
        compatibleTypes.put(BooleanDataType.class, new HashSet<Class<?>>());
        compatibleTypes.get(BooleanDataType.class).add(BooleanDataType.class);
        compatibleTypes.put(CharDataType.class, new HashSet<Class<?>>());
        compatibleTypes.get(CharDataType.class).add(CharDataType.class);
        compatibleTypes.get(CharDataType.class).add(SingleCharDataType.class);
        compatibleTypes.get(CharDataType.class).add(TextDataType.class);
        compatibleTypes.get(CharDataType.class).add(VarCharDataType.class);
        compatibleTypes.put(DateDataType.class, new HashSet<Class<?>>());
        compatibleTypes.get(DateDataType.class).add(DateDataType.class);
        compatibleTypes.get(DateDataType.class).add(DateTimeDataType.class);
        compatibleTypes.get(DateDataType.class).add(TimestampDataType.class);
        compatibleTypes.put(DateTimeDataType.class, new HashSet<Class<?>>());
        compatibleTypes.get(DateTimeDataType.class).add(DateDataType.class);
        compatibleTypes.get(DateTimeDataType.class).add(DateTimeDataType.class);
        compatibleTypes.get(DateTimeDataType.class).add(TimestampDataType.class);
        compatibleTypes.put(DecimalDataType.class, new HashSet<Class<?>>());
        compatibleTypes.get(DecimalDataType.class).add(BigIntDataType.class);
        compatibleTypes.get(DecimalDataType.class).add(DecimalDataType.class);
        compatibleTypes.get(DecimalDataType.class).add(DoubleDataType.class);
        compatibleTypes.get(DecimalDataType.class).add(FloatDataType.class);
        compatibleTypes.get(DecimalDataType.class).add(IntDataType.class);
        compatibleTypes.get(DecimalDataType.class).add(MediumIntDataType.class);
        compatibleTypes.get(DecimalDataType.class).add(NumericDataType.class);
        compatibleTypes.get(DecimalDataType.class).add(RealDataType.class);
        compatibleTypes.get(DecimalDataType.class).add(SmallIntDataType.class);
        compatibleTypes.get(DecimalDataType.class).add(TinyIntDataType.class);
        compatibleTypes.put(DoubleDataType.class, new HashSet<Class<?>>());
        compatibleTypes.get(DoubleDataType.class).add(BigIntDataType.class);
        compatibleTypes.get(DoubleDataType.class).add(DecimalDataType.class);
        compatibleTypes.get(DoubleDataType.class).add(DoubleDataType.class);
        compatibleTypes.get(DoubleDataType.class).add(FloatDataType.class);
        compatibleTypes.get(DoubleDataType.class).add(IntDataType.class);
        compatibleTypes.get(DoubleDataType.class).add(MediumIntDataType.class);
        compatibleTypes.get(DoubleDataType.class).add(NumericDataType.class);
        compatibleTypes.get(DoubleDataType.class).add(RealDataType.class);
        compatibleTypes.get(DoubleDataType.class).add(SmallIntDataType.class);
        compatibleTypes.get(DoubleDataType.class).add(TinyIntDataType.class);
        compatibleTypes.put(FloatDataType.class, new HashSet<Class<?>>());
        compatibleTypes.get(FloatDataType.class).add(BigIntDataType.class);
        compatibleTypes.get(FloatDataType.class).add(DecimalDataType.class);
        compatibleTypes.get(FloatDataType.class).add(DoubleDataType.class);
        compatibleTypes.get(FloatDataType.class).add(FloatDataType.class);
        compatibleTypes.get(FloatDataType.class).add(IntDataType.class);
        compatibleTypes.get(FloatDataType.class).add(MediumIntDataType.class);
        compatibleTypes.get(FloatDataType.class).add(NumericDataType.class);
        compatibleTypes.get(FloatDataType.class).add(RealDataType.class);
        compatibleTypes.get(FloatDataType.class).add(SmallIntDataType.class);
        compatibleTypes.get(FloatDataType.class).add(TinyIntDataType.class);
        compatibleTypes.put(IntDataType.class, new HashSet<Class<?>>());
        compatibleTypes.get(IntDataType.class).add(BigIntDataType.class);
        compatibleTypes.get(IntDataType.class).add(DecimalDataType.class);
        compatibleTypes.get(IntDataType.class).add(DoubleDataType.class);
        compatibleTypes.get(IntDataType.class).add(FloatDataType.class);
        compatibleTypes.get(IntDataType.class).add(IntDataType.class);
        compatibleTypes.get(IntDataType.class).add(MediumIntDataType.class);
        compatibleTypes.get(IntDataType.class).add(NumericDataType.class);
        compatibleTypes.get(IntDataType.class).add(RealDataType.class);
        compatibleTypes.get(IntDataType.class).add(SmallIntDataType.class);
        compatibleTypes.get(IntDataType.class).add(TinyIntDataType.class);
        compatibleTypes.put(MediumIntDataType.class, new HashSet<Class<?>>());
        compatibleTypes.get(MediumIntDataType.class).add(BigIntDataType.class);
        compatibleTypes.get(MediumIntDataType.class).add(DecimalDataType.class);
        compatibleTypes.get(MediumIntDataType.class).add(DoubleDataType.class);
        compatibleTypes.get(MediumIntDataType.class).add(FloatDataType.class);
        compatibleTypes.get(MediumIntDataType.class).add(IntDataType.class);
        compatibleTypes.get(MediumIntDataType.class).add(MediumIntDataType.class);
        compatibleTypes.get(MediumIntDataType.class).add(NumericDataType.class);
        compatibleTypes.get(MediumIntDataType.class).add(RealDataType.class);
        compatibleTypes.get(MediumIntDataType.class).add(SmallIntDataType.class);
        compatibleTypes.get(MediumIntDataType.class).add(TinyIntDataType.class);
        compatibleTypes.put(NumericDataType.class, new HashSet<Class<?>>());
        compatibleTypes.get(NumericDataType.class).add(BigIntDataType.class);
        compatibleTypes.get(NumericDataType.class).add(DecimalDataType.class);
        compatibleTypes.get(NumericDataType.class).add(DoubleDataType.class);
        compatibleTypes.get(NumericDataType.class).add(FloatDataType.class);
        compatibleTypes.get(NumericDataType.class).add(IntDataType.class);
        compatibleTypes.get(NumericDataType.class).add(MediumIntDataType.class);
        compatibleTypes.get(NumericDataType.class).add(NumericDataType.class);
        compatibleTypes.get(NumericDataType.class).add(RealDataType.class);
        compatibleTypes.get(NumericDataType.class).add(SmallIntDataType.class);
        compatibleTypes.get(NumericDataType.class).add(TinyIntDataType.class);
        compatibleTypes.put(RealDataType.class, new HashSet<Class<?>>());
        compatibleTypes.get(RealDataType.class).add(BigIntDataType.class);
        compatibleTypes.get(RealDataType.class).add(DecimalDataType.class);
        compatibleTypes.get(RealDataType.class).add(DoubleDataType.class);
        compatibleTypes.get(RealDataType.class).add(FloatDataType.class);
        compatibleTypes.get(RealDataType.class).add(IntDataType.class);
        compatibleTypes.get(RealDataType.class).add(MediumIntDataType.class);
        compatibleTypes.get(RealDataType.class).add(NumericDataType.class);
        compatibleTypes.get(RealDataType.class).add(RealDataType.class);
        compatibleTypes.get(RealDataType.class).add(SmallIntDataType.class);
        compatibleTypes.get(RealDataType.class).add(TinyIntDataType.class);
        compatibleTypes.put(SingleCharDataType.class, new HashSet<Class<?>>());
        compatibleTypes.get(SingleCharDataType.class).add(CharDataType.class);
        compatibleTypes.get(SingleCharDataType.class).add(SingleCharDataType.class);
        compatibleTypes.get(SingleCharDataType.class).add(TextDataType.class);
        compatibleTypes.get(SingleCharDataType.class).add(VarCharDataType.class);
        compatibleTypes.put(SmallIntDataType.class, new HashSet<Class<?>>());
        compatibleTypes.get(SmallIntDataType.class).add(BigIntDataType.class);
        compatibleTypes.get(SmallIntDataType.class).add(DecimalDataType.class);
        compatibleTypes.get(SmallIntDataType.class).add(DoubleDataType.class);
        compatibleTypes.get(SmallIntDataType.class).add(FloatDataType.class);
        compatibleTypes.get(SmallIntDataType.class).add(IntDataType.class);
        compatibleTypes.get(SmallIntDataType.class).add(MediumIntDataType.class);
        compatibleTypes.get(SmallIntDataType.class).add(NumericDataType.class);
        compatibleTypes.get(SmallIntDataType.class).add(RealDataType.class);
        compatibleTypes.get(SmallIntDataType.class).add(SmallIntDataType.class);
        compatibleTypes.get(SmallIntDataType.class).add(TinyIntDataType.class);
        compatibleTypes.put(TextDataType.class, new HashSet<Class<?>>());
        compatibleTypes.get(TextDataType.class).add(CharDataType.class);
        compatibleTypes.get(TextDataType.class).add(SingleCharDataType.class);
        compatibleTypes.get(TextDataType.class).add(TextDataType.class);
        compatibleTypes.get(TextDataType.class).add(VarCharDataType.class);
        compatibleTypes.put(TimeDataType.class, new HashSet<Class<?>>());
        compatibleTypes.get(TimeDataType.class).add(TimeDataType.class);
        compatibleTypes.put(TimestampDataType.class, new HashSet<Class<?>>());
        compatibleTypes.get(TimestampDataType.class).add(DateDataType.class);
        compatibleTypes.get(TimestampDataType.class).add(DateTimeDataType.class);
        compatibleTypes.get(TimestampDataType.class).add(TimestampDataType.class);
        compatibleTypes.put(TinyIntDataType.class, new HashSet<Class<?>>());
        compatibleTypes.get(TinyIntDataType.class).add(BigIntDataType.class);
        compatibleTypes.get(TinyIntDataType.class).add(DecimalDataType.class);
        compatibleTypes.get(TinyIntDataType.class).add(DoubleDataType.class);
        compatibleTypes.get(TinyIntDataType.class).add(FloatDataType.class);
        compatibleTypes.get(TinyIntDataType.class).add(IntDataType.class);
        compatibleTypes.get(TinyIntDataType.class).add(MediumIntDataType.class);
        compatibleTypes.get(TinyIntDataType.class).add(NumericDataType.class);
        compatibleTypes.get(TinyIntDataType.class).add(RealDataType.class);
        compatibleTypes.get(TinyIntDataType.class).add(SmallIntDataType.class);
        compatibleTypes.get(TinyIntDataType.class).add(TinyIntDataType.class);
        compatibleTypes.put(VarCharDataType.class, new HashSet<Class<?>>());
        compatibleTypes.get(VarCharDataType.class).add(CharDataType.class);
        compatibleTypes.get(VarCharDataType.class).add(SingleCharDataType.class);
        compatibleTypes.get(VarCharDataType.class).add(TextDataType.class);
        compatibleTypes.get(VarCharDataType.class).add(VarCharDataType.class);
    }

}
