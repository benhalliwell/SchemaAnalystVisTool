package parsedcasestudy;

import org.schemaanalyst.sqlrepresentation.Schema;
import org.schemaanalyst.sqlrepresentation.Table;
import org.schemaanalyst.sqlrepresentation.datatype.DateTimeDataType;
import org.schemaanalyst.sqlrepresentation.datatype.IntDataType;
import org.schemaanalyst.sqlrepresentation.datatype.VarCharDataType;

/*
 * DavilaDjango schema.
 * Java code originally generated: 2014/04/25 14:46:50
 *
 */

@SuppressWarnings("serial")
public class DavilaDjango extends Schema {

	public DavilaDjango() {
		super("DavilaDjango");

		Table tableCoordinateSystems = this.createTable("coordinate_systems");
		tableCoordinateSystems.createColumn("id", new IntDataType());
		tableCoordinateSystems.createColumn("short_name", new VarCharDataType(150));
		tableCoordinateSystems.createColumn("long_name", new VarCharDataType(765));
		tableCoordinateSystems.createColumn("notes", new VarCharDataType(765));
		tableCoordinateSystems.createColumn("reference", new VarCharDataType(765));
		tableCoordinateSystems.createColumn("created_at", new DateTimeDataType());
		tableCoordinateSystems.createColumn("updated_at", new DateTimeDataType());
		this.createPrimaryKeyConstraint(tableCoordinateSystems, tableCoordinateSystems.getColumn("id"));
		this.createNotNullConstraint(tableCoordinateSystems, tableCoordinateSystems.getColumn("id"));
		this.createNotNullConstraint(tableCoordinateSystems, tableCoordinateSystems.getColumn("short_name"));
		this.createNotNullConstraint(tableCoordinateSystems, tableCoordinateSystems.getColumn("long_name"));
		this.createNotNullConstraint(tableCoordinateSystems, tableCoordinateSystems.getColumn("notes"));
		this.createNotNullConstraint(tableCoordinateSystems, tableCoordinateSystems.getColumn("reference"));

		Table tableLocations = this.createTable("locations");
		tableLocations.createColumn("id", new IntDataType());
		tableLocations.createColumn("name", new VarCharDataType(765));
		tableLocations.createColumn("lat", new IntDataType());
		tableLocations.createColumn("long", new IntDataType());
		tableLocations.createColumn("notes", new VarCharDataType(765));
		tableLocations.createColumn("coordinate_system_id", new IntDataType());
		tableLocations.createColumn("created_at", new DateTimeDataType());
		tableLocations.createColumn("updated_at", new DateTimeDataType());
		this.createPrimaryKeyConstraint(tableLocations, tableLocations.getColumn("id"));
		this.createForeignKeyConstraint(tableLocations, tableLocations.getColumn("coordinate_system_id"), tableCoordinateSystems, tableCoordinateSystems.getColumn("id"));
		this.createNotNullConstraint(tableLocations, tableLocations.getColumn("id"));
		this.createNotNullConstraint(tableLocations, tableLocations.getColumn("name"));
		this.createNotNullConstraint(tableLocations, tableLocations.getColumn("notes"));

		Table tableRegions = this.createTable("regions");
		tableRegions.createColumn("id", new IntDataType());
		tableRegions.createColumn("name", new VarCharDataType(765));
		tableRegions.createColumn("notes", new VarCharDataType(765));
		tableRegions.createColumn("created_at", new DateTimeDataType());
		tableRegions.createColumn("updated_at", new DateTimeDataType());
		this.createPrimaryKeyConstraint(tableRegions, tableRegions.getColumn("id"));
		this.createNotNullConstraint(tableRegions, tableRegions.getColumn("id"));
		this.createNotNullConstraint(tableRegions, tableRegions.getColumn("name"));
		this.createNotNullConstraint(tableRegions, tableRegions.getColumn("notes"));

		Table tableInRegions = this.createTable("in_regions");
		tableInRegions.createColumn("id", new IntDataType());
		tableInRegions.createColumn("location_id", new IntDataType());
		tableInRegions.createColumn("region_id", new IntDataType());
		tableInRegions.createColumn("notes", new VarCharDataType(765));
		tableInRegions.createColumn("created_at", new DateTimeDataType());
		tableInRegions.createColumn("updated_at", new DateTimeDataType());
		this.createPrimaryKeyConstraint(tableInRegions, tableInRegions.getColumn("id"));
		this.createForeignKeyConstraint(tableInRegions, tableInRegions.getColumn("location_id"), tableLocations, tableLocations.getColumn("id"));
		this.createForeignKeyConstraint(tableInRegions, tableInRegions.getColumn("region_id"), tableRegions, tableRegions.getColumn("id"));
		this.createNotNullConstraint(tableInRegions, tableInRegions.getColumn("id"));
		this.createNotNullConstraint(tableInRegions, tableInRegions.getColumn("notes"));

		Table tableContinents = this.createTable("continents");
		tableContinents.createColumn("id", new IntDataType());
		tableContinents.createColumn("name", new VarCharDataType(765));
		tableContinents.createColumn("created_at", new DateTimeDataType());
		tableContinents.createColumn("updated_at", new DateTimeDataType());
		this.createPrimaryKeyConstraint(tableContinents, tableContinents.getColumn("id"));
		this.createNotNullConstraint(tableContinents, tableContinents.getColumn("id"));
		this.createNotNullConstraint(tableContinents, tableContinents.getColumn("name"));

		Table tableStates = this.createTable("states");
		tableStates.createColumn("id", new IntDataType());
		tableStates.createColumn("name", new VarCharDataType(765));
		tableStates.createColumn("continent_id", new IntDataType());
		tableStates.createColumn("notes", new VarCharDataType(765));
		tableStates.createColumn("created_at", new DateTimeDataType());
		tableStates.createColumn("updated_at", new DateTimeDataType());
		this.createPrimaryKeyConstraint(tableStates, tableStates.getColumn("id"));
		this.createForeignKeyConstraint(tableStates, tableStates.getColumn("continent_id"), tableContinents, tableContinents.getColumn("id"));
		this.createNotNullConstraint(tableStates, tableStates.getColumn("id"));
		this.createNotNullConstraint(tableStates, tableStates.getColumn("name"));
		this.createNotNullConstraint(tableStates, tableStates.getColumn("continent_id"));
		this.createNotNullConstraint(tableStates, tableStates.getColumn("notes"));

		Table tableInStates = this.createTable("in_states");
		tableInStates.createColumn("id", new IntDataType());
		tableInStates.createColumn("location_id", new IntDataType());
		tableInStates.createColumn("state_id", new IntDataType());
		tableInStates.createColumn("start_year", new IntDataType());
		tableInStates.createColumn("end_year", new IntDataType());
		tableInStates.createColumn("notes", new VarCharDataType(765));
		tableInStates.createColumn("created_at", new DateTimeDataType());
		tableInStates.createColumn("updated_at", new DateTimeDataType());
		this.createPrimaryKeyConstraint(tableInStates, tableInStates.getColumn("id"));
		this.createForeignKeyConstraint(tableInStates, tableInStates.getColumn("location_id"), tableLocations, tableLocations.getColumn("id"));
		this.createForeignKeyConstraint(tableInStates, tableInStates.getColumn("state_id"), tableStates, tableStates.getColumn("id"));
		this.createNotNullConstraint(tableInStates, tableInStates.getColumn("id"));
		this.createNotNullConstraint(tableInStates, tableInStates.getColumn("notes"));

		Table tableEmpires = this.createTable("empires");
		tableEmpires.createColumn("id", new IntDataType());
		tableEmpires.createColumn("name", new VarCharDataType(765));
		tableEmpires.createColumn("notes", new VarCharDataType(765));
		tableEmpires.createColumn("created_at", new DateTimeDataType());
		tableEmpires.createColumn("updated_at", new DateTimeDataType());
		this.createPrimaryKeyConstraint(tableEmpires, tableEmpires.getColumn("id"));
		this.createNotNullConstraint(tableEmpires, tableEmpires.getColumn("id"));
		this.createNotNullConstraint(tableEmpires, tableEmpires.getColumn("name"));
		this.createNotNullConstraint(tableEmpires, tableEmpires.getColumn("notes"));

		Table tableInEmpires = this.createTable("in_empires");
		tableInEmpires.createColumn("id", new IntDataType());
		tableInEmpires.createColumn("state_id", new IntDataType());
		tableInEmpires.createColumn("empire_id", new IntDataType());
		tableInEmpires.createColumn("start_year", new IntDataType());
		tableInEmpires.createColumn("end_year", new IntDataType());
		tableInEmpires.createColumn("notes", new VarCharDataType(765));
		tableInEmpires.createColumn("created_at", new DateTimeDataType());
		tableInEmpires.createColumn("updated_at", new DateTimeDataType());
		this.createPrimaryKeyConstraint(tableInEmpires, tableInEmpires.getColumn("id"));
		this.createForeignKeyConstraint(tableInEmpires, tableInEmpires.getColumn("state_id"), tableStates, tableStates.getColumn("id"));
		this.createForeignKeyConstraint(tableInEmpires, tableInEmpires.getColumn("empire_id"), tableEmpires, tableEmpires.getColumn("id"));
		this.createNotNullConstraint(tableInEmpires, tableInEmpires.getColumn("id"));
		this.createNotNullConstraint(tableInEmpires, tableInEmpires.getColumn("notes"));

		Table tableIndividuals = this.createTable("individuals");
		tableIndividuals.createColumn("id", new IntDataType());
		tableIndividuals.createColumn("name", new VarCharDataType(765));
		tableIndividuals.createColumn("sex", new VarCharDataType(765));
		tableIndividuals.createColumn("birth_date", new IntDataType());
		tableIndividuals.createColumn("death_date", new IntDataType());
		tableIndividuals.createColumn("state_id", new IntDataType());
		tableIndividuals.createColumn("notes", new VarCharDataType(765));
		tableIndividuals.createColumn("created_at", new DateTimeDataType());
		tableIndividuals.createColumn("updated_at", new DateTimeDataType());
		tableIndividuals.createColumn("sort_name", new VarCharDataType(765));
		tableIndividuals.createColumn("american", new IntDataType());
		tableIndividuals.createColumn("birth_day_known", new IntDataType());
		tableIndividuals.createColumn("birth_month_know", new IntDataType());
		tableIndividuals.createColumn("birth_year_known", new IntDataType());
		tableIndividuals.createColumn("death_day_known", new IntDataType());
		tableIndividuals.createColumn("death_month_known", new IntDataType());
		tableIndividuals.createColumn("death_year_known", new IntDataType());
		this.createPrimaryKeyConstraint(tableIndividuals, tableIndividuals.getColumn("id"));
		this.createForeignKeyConstraint(tableIndividuals, tableIndividuals.getColumn("state_id"), tableStates, tableStates.getColumn("id"));
		this.createNotNullConstraint(tableIndividuals, tableIndividuals.getColumn("id"));
		this.createNotNullConstraint(tableIndividuals, tableIndividuals.getColumn("name"));
		this.createNotNullConstraint(tableIndividuals, tableIndividuals.getColumn("sex"));
		this.createNotNullConstraint(tableIndividuals, tableIndividuals.getColumn("notes"));
		this.createNotNullConstraint(tableIndividuals, tableIndividuals.getColumn("sort_name"));

		Table tableResidenceTypes = this.createTable("residence_types");
		tableResidenceTypes.createColumn("id", new IntDataType());
		tableResidenceTypes.createColumn("name", new VarCharDataType(765));
		tableResidenceTypes.createColumn("temporary", new IntDataType());
		tableResidenceTypes.createColumn("notes", new VarCharDataType(765));
		tableResidenceTypes.createColumn("created_at", new DateTimeDataType());
		tableResidenceTypes.createColumn("updated_at", new DateTimeDataType());
		this.createPrimaryKeyConstraint(tableResidenceTypes, tableResidenceTypes.getColumn("id"));
		this.createNotNullConstraint(tableResidenceTypes, tableResidenceTypes.getColumn("id"));
		this.createNotNullConstraint(tableResidenceTypes, tableResidenceTypes.getColumn("name"));
		this.createNotNullConstraint(tableResidenceTypes, tableResidenceTypes.getColumn("notes"));

		Table tableResidences = this.createTable("residences");
		tableResidences.createColumn("id", new IntDataType());
		tableResidences.createColumn("individual_id", new IntDataType());
		tableResidences.createColumn("location_id", new IntDataType());
		tableResidences.createColumn("residence_type_id", new IntDataType());
		tableResidences.createColumn("start_year", new IntDataType());
		tableResidences.createColumn("end_year", new IntDataType());
		tableResidences.createColumn("birth_place", new IntDataType());
		tableResidences.createColumn("death_place", new IntDataType());
		tableResidences.createColumn("notes", new VarCharDataType(765));
		tableResidences.createColumn("created_at", new DateTimeDataType());
		tableResidences.createColumn("updated_at", new DateTimeDataType());
		this.createPrimaryKeyConstraint(tableResidences, tableResidences.getColumn("id"));
		this.createForeignKeyConstraint(tableResidences, tableResidences.getColumn("individual_id"), tableIndividuals, tableIndividuals.getColumn("id"));
		this.createForeignKeyConstraint(tableResidences, tableResidences.getColumn("location_id"), tableLocations, tableLocations.getColumn("id"));
		this.createForeignKeyConstraint(tableResidences, tableResidences.getColumn("residence_type_id"), tableResidenceTypes, tableResidenceTypes.getColumn("id"));
		this.createNotNullConstraint(tableResidences, tableResidences.getColumn("id"));
		this.createNotNullConstraint(tableResidences, tableResidences.getColumn("notes"));

		Table tableOccupationTypes = this.createTable("occupation_types");
		tableOccupationTypes.createColumn("id", new IntDataType());
		tableOccupationTypes.createColumn("name", new VarCharDataType(765));
		tableOccupationTypes.createColumn("notes", new VarCharDataType(765));
		tableOccupationTypes.createColumn("created_at", new DateTimeDataType());
		tableOccupationTypes.createColumn("updated_at", new DateTimeDataType());
		this.createPrimaryKeyConstraint(tableOccupationTypes, tableOccupationTypes.getColumn("id"));
		this.createNotNullConstraint(tableOccupationTypes, tableOccupationTypes.getColumn("id"));
		this.createNotNullConstraint(tableOccupationTypes, tableOccupationTypes.getColumn("name"));
		this.createNotNullConstraint(tableOccupationTypes, tableOccupationTypes.getColumn("notes"));

		Table tableOccupationTitles = this.createTable("occupation_titles");
		tableOccupationTitles.createColumn("id", new IntDataType());
		tableOccupationTitles.createColumn("name", new VarCharDataType(765));
		tableOccupationTitles.createColumn("occupation_type_id", new IntDataType());
		tableOccupationTitles.createColumn("notes", new VarCharDataType(765));
		tableOccupationTitles.createColumn("created_at", new DateTimeDataType());
		tableOccupationTitles.createColumn("updated_at", new DateTimeDataType());
		this.createPrimaryKeyConstraint(tableOccupationTitles, tableOccupationTitles.getColumn("id"));
		this.createForeignKeyConstraint(tableOccupationTitles, tableOccupationTitles.getColumn("occupation_type_id"), tableOccupationTypes, tableOccupationTypes.getColumn("id"));
		this.createNotNullConstraint(tableOccupationTitles, tableOccupationTitles.getColumn("id"));
		this.createNotNullConstraint(tableOccupationTitles, tableOccupationTitles.getColumn("name"));
		this.createNotNullConstraint(tableOccupationTitles, tableOccupationTitles.getColumn("notes"));

		Table tableOccupations = this.createTable("occupations");
		tableOccupations.createColumn("id", new IntDataType());
		tableOccupations.createColumn("individual_id", new IntDataType());
		tableOccupations.createColumn("occupation_title_id", new IntDataType());
		tableOccupations.createColumn("start_year", new IntDataType());
		tableOccupations.createColumn("end_year", new IntDataType());
		tableOccupations.createColumn("notes", new VarCharDataType(765));
		tableOccupations.createColumn("created_at", new DateTimeDataType());
		tableOccupations.createColumn("updated_at", new DateTimeDataType());
		this.createPrimaryKeyConstraint(tableOccupations, tableOccupations.getColumn("id"));
		this.createForeignKeyConstraint(tableOccupations, tableOccupations.getColumn("individual_id"), tableIndividuals, tableIndividuals.getColumn("id"));
		this.createForeignKeyConstraint(tableOccupations, tableOccupations.getColumn("occupation_title_id"), tableOccupationTitles, tableOccupationTitles.getColumn("id"));
		this.createNotNullConstraint(tableOccupations, tableOccupations.getColumn("id"));
		this.createNotNullConstraint(tableOccupations, tableOccupations.getColumn("notes"));

		Table tableRelationshipTypes = this.createTable("relationship_types");
		tableRelationshipTypes.createColumn("id", new IntDataType());
		tableRelationshipTypes.createColumn("name", new VarCharDataType(765));
		tableRelationshipTypes.createColumn("notes", new VarCharDataType(765));
		tableRelationshipTypes.createColumn("created_at", new DateTimeDataType());
		tableRelationshipTypes.createColumn("updated_at", new DateTimeDataType());
		this.createPrimaryKeyConstraint(tableRelationshipTypes, tableRelationshipTypes.getColumn("id"));
		this.createNotNullConstraint(tableRelationshipTypes, tableRelationshipTypes.getColumn("id"));
		this.createNotNullConstraint(tableRelationshipTypes, tableRelationshipTypes.getColumn("name"));
		this.createNotNullConstraint(tableRelationshipTypes, tableRelationshipTypes.getColumn("notes"));

		Table tableRelationships = this.createTable("relationships");
		tableRelationships.createColumn("id", new IntDataType());
		tableRelationships.createColumn("individual_id_1", new IntDataType());
		tableRelationships.createColumn("individual_id_2", new IntDataType());
		tableRelationships.createColumn("relationship_type_id", new IntDataType());
		tableRelationships.createColumn("start_year", new IntDataType());
		tableRelationships.createColumn("end_year", new IntDataType());
		tableRelationships.createColumn("notes", new VarCharDataType(765));
		tableRelationships.createColumn("created_at", new DateTimeDataType());
		tableRelationships.createColumn("updated_at", new DateTimeDataType());
		this.createPrimaryKeyConstraint(tableRelationships, tableRelationships.getColumn("id"));
		this.createForeignKeyConstraint(tableRelationships, tableRelationships.getColumn("individual_id_1"), tableIndividuals, tableIndividuals.getColumn("id"));
		this.createForeignKeyConstraint(tableRelationships, tableRelationships.getColumn("individual_id_2"), tableIndividuals, tableIndividuals.getColumn("id"));
		this.createForeignKeyConstraint(tableRelationships, tableRelationships.getColumn("relationship_type_id"), tableRelationshipTypes, tableRelationshipTypes.getColumn("id"));
		this.createNotNullConstraint(tableRelationships, tableRelationships.getColumn("id"));
		this.createNotNullConstraint(tableRelationships, tableRelationships.getColumn("notes"));

		Table tableAssignmentTypes = this.createTable("assignment_types");
		tableAssignmentTypes.createColumn("id", new IntDataType());
		tableAssignmentTypes.createColumn("name", new VarCharDataType(765));
		tableAssignmentTypes.createColumn("notes", new VarCharDataType(765));
		tableAssignmentTypes.createColumn("created_at", new DateTimeDataType());
		tableAssignmentTypes.createColumn("updated_at", new DateTimeDataType());
		this.createPrimaryKeyConstraint(tableAssignmentTypes, tableAssignmentTypes.getColumn("id"));
		this.createNotNullConstraint(tableAssignmentTypes, tableAssignmentTypes.getColumn("id"));
		this.createNotNullConstraint(tableAssignmentTypes, tableAssignmentTypes.getColumn("name"));
		this.createNotNullConstraint(tableAssignmentTypes, tableAssignmentTypes.getColumn("notes"));

		Table tableAssignmentTitles = this.createTable("assignment_titles");
		tableAssignmentTitles.createColumn("id", new IntDataType());
		tableAssignmentTitles.createColumn("name", new VarCharDataType(765));
		tableAssignmentTitles.createColumn("assignment_type_id", new IntDataType());
		tableAssignmentTitles.createColumn("temporary", new IntDataType());
		tableAssignmentTitles.createColumn("commissioned", new IntDataType());
		tableAssignmentTitles.createColumn("notes", new VarCharDataType(765));
		tableAssignmentTitles.createColumn("created_at", new DateTimeDataType());
		tableAssignmentTitles.createColumn("updated_at", new DateTimeDataType());
		this.createPrimaryKeyConstraint(tableAssignmentTitles, tableAssignmentTitles.getColumn("id"));
		this.createForeignKeyConstraint(tableAssignmentTitles, tableAssignmentTitles.getColumn("assignment_type_id"), tableAssignmentTypes, tableAssignmentTypes.getColumn("id"));
		this.createNotNullConstraint(tableAssignmentTitles, tableAssignmentTitles.getColumn("id"));
		this.createNotNullConstraint(tableAssignmentTitles, tableAssignmentTitles.getColumn("name"));
		this.createNotNullConstraint(tableAssignmentTitles, tableAssignmentTitles.getColumn("notes"));

		Table tableAssignments = this.createTable("assignments");
		tableAssignments.createColumn("id", new IntDataType());
		tableAssignments.createColumn("individual_id", new IntDataType());
		tableAssignments.createColumn("assignment_title_id", new IntDataType());
		tableAssignments.createColumn("location_id", new IntDataType());
		tableAssignments.createColumn("start_year", new IntDataType());
		tableAssignments.createColumn("start_certain", new IntDataType());
		tableAssignments.createColumn("end_year", new IntDataType());
		tableAssignments.createColumn("end_certain", new IntDataType());
		tableAssignments.createColumn("notes", new VarCharDataType(765));
		this.createPrimaryKeyConstraint(tableAssignments, tableAssignments.getColumn("id"));
		this.createForeignKeyConstraint(tableAssignments, tableAssignments.getColumn("individual_id"), tableIndividuals, tableIndividuals.getColumn("id"));
		this.createForeignKeyConstraint(tableAssignments, tableAssignments.getColumn("assignment_title_id"), tableAssignmentTitles, tableAssignmentTitles.getColumn("id"));
		this.createForeignKeyConstraint(tableAssignments, tableAssignments.getColumn("location_id"), tableLocations, tableLocations.getColumn("id"));
		this.createNotNullConstraint(tableAssignments, tableAssignments.getColumn("id"));
		this.createNotNullConstraint(tableAssignments, tableAssignments.getColumn("notes"));

		Table tableOrganizationTypes = this.createTable("organization_types");
		tableOrganizationTypes.createColumn("id", new IntDataType());
		tableOrganizationTypes.createColumn("name", new VarCharDataType(765));
		tableOrganizationTypes.createColumn("notes", new VarCharDataType(765));
		tableOrganizationTypes.createColumn("created_at", new DateTimeDataType());
		tableOrganizationTypes.createColumn("updated_at", new DateTimeDataType());
		this.createPrimaryKeyConstraint(tableOrganizationTypes, tableOrganizationTypes.getColumn("id"));
		this.createNotNullConstraint(tableOrganizationTypes, tableOrganizationTypes.getColumn("id"));
		this.createNotNullConstraint(tableOrganizationTypes, tableOrganizationTypes.getColumn("name"));
		this.createNotNullConstraint(tableOrganizationTypes, tableOrganizationTypes.getColumn("notes"));

		Table tableOrganizations = this.createTable("organizations");
		tableOrganizations.createColumn("id", new IntDataType());
		tableOrganizations.createColumn("name", new VarCharDataType(765));
		tableOrganizations.createColumn("start_year", new IntDataType());
		tableOrganizations.createColumn("end_year", new IntDataType());
		tableOrganizations.createColumn("magazine_sending", new IntDataType());
		tableOrganizations.createColumn("organization_type_id", new IntDataType());
		tableOrganizations.createColumn("location_id", new IntDataType());
		tableOrganizations.createColumn("org_bio", new VarCharDataType(765));
		tableOrganizations.createColumn("notes", new VarCharDataType(765));
		tableOrganizations.createColumn("created_at", new DateTimeDataType());
		tableOrganizations.createColumn("updated_at", new DateTimeDataType());
		this.createPrimaryKeyConstraint(tableOrganizations, tableOrganizations.getColumn("id"));
		this.createForeignKeyConstraint(tableOrganizations, tableOrganizations.getColumn("organization_type_id"), tableOrganizationTypes, tableOrganizationTypes.getColumn("id"));
		this.createForeignKeyConstraint(tableOrganizations, tableOrganizations.getColumn("location_id"), tableLocations, tableLocations.getColumn("id"));
		this.createNotNullConstraint(tableOrganizations, tableOrganizations.getColumn("id"));
		this.createNotNullConstraint(tableOrganizations, tableOrganizations.getColumn("name"));
		this.createNotNullConstraint(tableOrganizations, tableOrganizations.getColumn("org_bio"));
		this.createNotNullConstraint(tableOrganizations, tableOrganizations.getColumn("notes"));

		Table tableOrgEvolutionTypes = this.createTable("org_evolution_types");
		tableOrgEvolutionTypes.createColumn("id", new IntDataType());
		tableOrgEvolutionTypes.createColumn("name", new VarCharDataType(765));
		tableOrgEvolutionTypes.createColumn("notes", new VarCharDataType(765));
		tableOrgEvolutionTypes.createColumn("created_at", new DateTimeDataType());
		tableOrgEvolutionTypes.createColumn("updated_at", new DateTimeDataType());
		this.createPrimaryKeyConstraint(tableOrgEvolutionTypes, tableOrgEvolutionTypes.getColumn("id"));
		this.createNotNullConstraint(tableOrgEvolutionTypes, tableOrgEvolutionTypes.getColumn("id"));
		this.createNotNullConstraint(tableOrgEvolutionTypes, tableOrgEvolutionTypes.getColumn("name"));
		this.createNotNullConstraint(tableOrgEvolutionTypes, tableOrgEvolutionTypes.getColumn("notes"));

		Table tableOrgEvolutions = this.createTable("org_evolutions");
		tableOrgEvolutions.createColumn("id", new IntDataType());
		tableOrgEvolutions.createColumn("org_1_id", new IntDataType());
		tableOrgEvolutions.createColumn("org_2_id", new IntDataType());
		tableOrgEvolutions.createColumn("org_evolution_type_id", new IntDataType());
		tableOrgEvolutions.createColumn("date", new IntDataType());
		tableOrgEvolutions.createColumn("notes", new VarCharDataType(765));
		tableOrgEvolutions.createColumn("created_at", new DateTimeDataType());
		tableOrgEvolutions.createColumn("updated_at", new DateTimeDataType());
		tableOrgEvolutions.createColumn("day_known", new IntDataType());
		tableOrgEvolutions.createColumn("month_known", new IntDataType());
		tableOrgEvolutions.createColumn("year_known", new IntDataType());
		this.createPrimaryKeyConstraint(tableOrgEvolutions, tableOrgEvolutions.getColumn("id"));
		this.createForeignKeyConstraint(tableOrgEvolutions, tableOrgEvolutions.getColumn("org_1_id"), tableOrganizations, tableOrganizations.getColumn("id"));
		this.createForeignKeyConstraint(tableOrgEvolutions, tableOrgEvolutions.getColumn("org_2_id"), tableOrganizations, tableOrganizations.getColumn("id"));
		this.createForeignKeyConstraint(tableOrgEvolutions, tableOrgEvolutions.getColumn("org_evolution_type_id"), tableOrgEvolutionTypes, tableOrgEvolutionTypes.getColumn("id"));
		this.createNotNullConstraint(tableOrgEvolutions, tableOrgEvolutions.getColumn("id"));
		this.createNotNullConstraint(tableOrgEvolutions, tableOrgEvolutions.getColumn("notes"));

		Table tableRoleTypes = this.createTable("role_types");
		tableRoleTypes.createColumn("id", new IntDataType());
		tableRoleTypes.createColumn("name", new VarCharDataType(765));
		tableRoleTypes.createColumn("notes", new VarCharDataType(765));
		tableRoleTypes.createColumn("created_at", new DateTimeDataType());
		tableRoleTypes.createColumn("updated_at", new DateTimeDataType());
		this.createPrimaryKeyConstraint(tableRoleTypes, tableRoleTypes.getColumn("id"));
		this.createNotNullConstraint(tableRoleTypes, tableRoleTypes.getColumn("id"));
		this.createNotNullConstraint(tableRoleTypes, tableRoleTypes.getColumn("name"));
		this.createNotNullConstraint(tableRoleTypes, tableRoleTypes.getColumn("notes"));

		Table tableRoleTitles = this.createTable("role_titles");
		tableRoleTitles.createColumn("id", new IntDataType());
		tableRoleTitles.createColumn("name", new VarCharDataType(765));
		tableRoleTitles.createColumn("role_type_id", new IntDataType());
		tableRoleTitles.createColumn("notes", new VarCharDataType(765));
		tableRoleTitles.createColumn("created_at", new DateTimeDataType());
		tableRoleTitles.createColumn("updated_at", new DateTimeDataType());
		this.createPrimaryKeyConstraint(tableRoleTitles, tableRoleTitles.getColumn("id"));
		this.createForeignKeyConstraint(tableRoleTitles, tableRoleTitles.getColumn("role_type_id"), tableRoleTypes, tableRoleTypes.getColumn("id"));
		this.createNotNullConstraint(tableRoleTitles, tableRoleTitles.getColumn("id"));
		this.createNotNullConstraint(tableRoleTitles, tableRoleTitles.getColumn("name"));
		this.createNotNullConstraint(tableRoleTitles, tableRoleTitles.getColumn("notes"));

		Table tableMembers = this.createTable("members");
		tableMembers.createColumn("id", new IntDataType());
		tableMembers.createColumn("individual_id", new IntDataType());
		tableMembers.createColumn("organization_id", new IntDataType());
		tableMembers.createColumn("role_title_id", new IntDataType());
		tableMembers.createColumn("start_year", new IntDataType());
		tableMembers.createColumn("end_year", new IntDataType());
		tableMembers.createColumn("notes", new VarCharDataType(765));
		tableMembers.createColumn("created_at", new DateTimeDataType());
		tableMembers.createColumn("updated_at", new DateTimeDataType());
		this.createPrimaryKeyConstraint(tableMembers, tableMembers.getColumn("id"));
		this.createForeignKeyConstraint(tableMembers, tableMembers.getColumn("individual_id"), tableIndividuals, tableIndividuals.getColumn("id"));
		this.createForeignKeyConstraint(tableMembers, tableMembers.getColumn("organization_id"), tableOrganizations, tableOrganizations.getColumn("id"));
		this.createForeignKeyConstraint(tableMembers, tableMembers.getColumn("role_title_id"), tableRoleTitles, tableRoleTitles.getColumn("id"));
		this.createNotNullConstraint(tableMembers, tableMembers.getColumn("id"));
		this.createNotNullConstraint(tableMembers, tableMembers.getColumn("notes"));

		Table tableLetters = this.createTable("letters");
		tableLetters.createColumn("id", new IntDataType());
		tableLetters.createColumn("from_individual_id", new IntDataType());
		tableLetters.createColumn("from_organization_id", new IntDataType());
		tableLetters.createColumn("from_location_id", new IntDataType());
		tableLetters.createColumn("to_individual_id", new IntDataType());
		tableLetters.createColumn("to_organization_id", new IntDataType());
		tableLetters.createColumn("to_location_id", new IntDataType());
		tableLetters.createColumn("circular", new IntDataType());
		tableLetters.createColumn("date_sent", new IntDataType());
		tableLetters.createColumn("date_received", new IntDataType());
		tableLetters.createColumn("date_docketed", new IntDataType());
		tableLetters.createColumn("notes", new VarCharDataType(765));
		tableLetters.createColumn("title", new VarCharDataType(765));
		tableLetters.createColumn("sent_day_known", new IntDataType());
		tableLetters.createColumn("sent_month_known", new IntDataType());
		tableLetters.createColumn("sent_year_known", new IntDataType());
		tableLetters.createColumn("received_day_known", new IntDataType());
		tableLetters.createColumn("received_month_known", new IntDataType());
		tableLetters.createColumn("received_year_known", new IntDataType());
		tableLetters.createColumn("docketed_day_known", new IntDataType());
		tableLetters.createColumn("docketed_month_known", new IntDataType());
		tableLetters.createColumn("docketed_year_known", new IntDataType());
		tableLetters.createColumn("created_at", new DateTimeDataType());
		tableLetters.createColumn("updated_at", new DateTimeDataType());
		this.createPrimaryKeyConstraint(tableLetters, tableLetters.getColumn("id"));
		this.createForeignKeyConstraint(tableLetters, tableLetters.getColumn("from_individual_id"), tableIndividuals, tableIndividuals.getColumn("id"));
		this.createForeignKeyConstraint(tableLetters, tableLetters.getColumn("from_organization_id"), tableOrganizations, tableOrganizations.getColumn("id"));
		this.createForeignKeyConstraint(tableLetters, tableLetters.getColumn("from_location_id"), tableLocations, tableLocations.getColumn("id"));
		this.createForeignKeyConstraint(tableLetters, tableLetters.getColumn("to_individual_id"), tableIndividuals, tableIndividuals.getColumn("id"));
		this.createForeignKeyConstraint(tableLetters, tableLetters.getColumn("to_organization_id"), tableOrganizations, tableOrganizations.getColumn("id"));
		this.createForeignKeyConstraint(tableLetters, tableLetters.getColumn("to_location_id"), tableLocations, tableLocations.getColumn("id"));
		this.createNotNullConstraint(tableLetters, tableLetters.getColumn("id"));
		this.createNotNullConstraint(tableLetters, tableLetters.getColumn("notes"));
		this.createNotNullConstraint(tableLetters, tableLetters.getColumn("title"));

		Table tableEnclosures = this.createTable("enclosures");
		tableEnclosures.createColumn("id", new IntDataType());
		tableEnclosures.createColumn("main_letter_id", new IntDataType());
		tableEnclosures.createColumn("enclosed_letter_id", new IntDataType());
		tableEnclosures.createColumn("notes", new VarCharDataType(765));
		tableEnclosures.createColumn("created_at", new DateTimeDataType());
		tableEnclosures.createColumn("updated_at", new DateTimeDataType());
		this.createPrimaryKeyConstraint(tableEnclosures, tableEnclosures.getColumn("id"));
		this.createForeignKeyConstraint(tableEnclosures, tableEnclosures.getColumn("main_letter_id"), tableLetters, tableLetters.getColumn("id"));
		this.createForeignKeyConstraint(tableEnclosures, tableEnclosures.getColumn("enclosed_letter_id"), tableLetters, tableLetters.getColumn("id"));
		this.createNotNullConstraint(tableEnclosures, tableEnclosures.getColumn("id"));
		this.createNotNullConstraint(tableEnclosures, tableEnclosures.getColumn("notes"));

		Table tableBibliographies = this.createTable("bibliographies");
		tableBibliographies.createColumn("id", new IntDataType());
		tableBibliographies.createColumn("entry", new VarCharDataType(765));
		tableBibliographies.createColumn("notes", new VarCharDataType(765));
		tableBibliographies.createColumn("created_at", new DateTimeDataType());
		tableBibliographies.createColumn("updated_at", new DateTimeDataType());
		this.createPrimaryKeyConstraint(tableBibliographies, tableBibliographies.getColumn("id"));
		this.createNotNullConstraint(tableBibliographies, tableBibliographies.getColumn("id"));
		this.createNotNullConstraint(tableBibliographies, tableBibliographies.getColumn("entry"));
		this.createNotNullConstraint(tableBibliographies, tableBibliographies.getColumn("notes"));

		Table tableCitations = this.createTable("citations");
		tableCitations.createColumn("id", new IntDataType());
		tableCitations.createColumn("title", new VarCharDataType(765));
		tableCitations.createColumn("bibliography_id", new IntDataType());
		tableCitations.createColumn("pages", new VarCharDataType(765));
		tableCitations.createColumn("canonic_url", new VarCharDataType(765));
		tableCitations.createColumn("notes", new VarCharDataType(765));
		tableCitations.createColumn("created_at", new DateTimeDataType());
		tableCitations.createColumn("updated_at", new DateTimeDataType());
		this.createPrimaryKeyConstraint(tableCitations, tableCitations.getColumn("id"));
		this.createForeignKeyConstraint(tableCitations, tableCitations.getColumn("bibliography_id"), tableBibliographies, tableBibliographies.getColumn("id"));
		this.createNotNullConstraint(tableCitations, tableCitations.getColumn("id"));
		this.createNotNullConstraint(tableCitations, tableCitations.getColumn("title"));
		this.createNotNullConstraint(tableCitations, tableCitations.getColumn("pages"));
		this.createNotNullConstraint(tableCitations, tableCitations.getColumn("canonic_url"));
		this.createNotNullConstraint(tableCitations, tableCitations.getColumn("notes"));

		Table tableValidations = this.createTable("validations");
		tableValidations.createColumn("id", new IntDataType());
		tableValidations.createColumn("auth_user_id", new IntDataType());
		tableValidations.createColumn("content_type_id", new IntDataType());
		tableValidations.createColumn("object_id", new IntDataType());
		tableValidations.createColumn("supports", new IntDataType());
		tableValidations.createColumn("citation_id", new IntDataType());
		tableValidations.createColumn("notes", new VarCharDataType(765));
		this.createPrimaryKeyConstraint(tableValidations, tableValidations.getColumn("id"));
		this.createForeignKeyConstraint(tableValidations, tableValidations.getColumn("citation_id"), tableCitations, tableCitations.getColumn("id"));
		this.createNotNullConstraint(tableValidations, tableValidations.getColumn("id"));
		this.createNotNullConstraint(tableValidations, tableValidations.getColumn("content_type_id"));
		this.createNotNullConstraint(tableValidations, tableValidations.getColumn("object_id"));
		this.createNotNullConstraint(tableValidations, tableValidations.getColumn("notes"));
	}
}

